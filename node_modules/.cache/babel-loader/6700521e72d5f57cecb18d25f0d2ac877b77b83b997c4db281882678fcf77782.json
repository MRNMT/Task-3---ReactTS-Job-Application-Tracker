{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trainning Room\\\\Downloads\\\\Goodwill\\\\Task-3---ReactTS-Job-Application-Tracker\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Mock login - in real app, call API\n      const response = await fetch('http://localhost:3001/users?username=' + username);\n      const users = await response.json();\n      if (users.length > 0 && users[0].password === password) {\n        const loggedUser = {\n          id: users[0].id,\n          username: users[0].username\n        };\n        setUser(loggedUser);\n        localStorage.setItem('user', JSON.stringify(loggedUser));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      // Check if username already exists\n      const checkResponse = await fetch('http://localhost:3001/users?username=' + username);\n      const existingUsers = await checkResponse.json();\n      if (existingUsers.length > 0) {\n        return false; // Username already exists\n      }\n\n      // Mock register - in real app, call API\n      const response = await fetch('http://localhost:3001/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const newUser = await response.json();\n        const loggedUser = {\n          id: newUser.id,\n          username: newUser.username\n        };\n        setUser(loggedUser);\n        localStorage.setItem('user', JSON.stringify(loggedUser));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Register error:', error);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","storedUser","localStorage","getItem","JSON","parse","login","username","password","response","fetch","users","json","length","loggedUser","id","setItem","stringify","error","console","register","checkResponse","existingUsers","method","headers","body","ok","newUser","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Trainning Room/Downloads/Goodwill/Task-3---ReactTS-Job-Application-Tracker/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: number;\r\n  username: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (username: string, password: string) => Promise<boolean>;\r\n  register: (username: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      // Mock login - in real app, call API\r\n      const response = await fetch('http://localhost:3001/users?username=' + username);\r\n      const users = await response.json();\r\n      if (users.length > 0 && users[0].password === password) {\r\n        const loggedUser = { id: users[0].id, username: users[0].username };\r\n        setUser(loggedUser);\r\n        localStorage.setItem('user', JSON.stringify(loggedUser));\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      // Check if username already exists\r\n      const checkResponse = await fetch('http://localhost:3001/users?username=' + username);\r\n      const existingUsers = await checkResponse.json();\r\n      if (existingUsers.length > 0) {\r\n        return false; // Username already exists\r\n      }\r\n\r\n      // Mock register - in real app, call API\r\n      const response = await fetch('http://localhost:3001/users', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      if (response.ok) {\r\n        const newUser = await response.json();\r\n        const loggedUser = { id: newUser.id, username: newUser.username };\r\n        setUser(loggedUser);\r\n        localStorage.setItem('user', JSON.stringify(loggedUser));\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Register error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}